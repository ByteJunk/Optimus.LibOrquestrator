// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Optimus.LibOrquestrator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The cloud template that hosts the Robot
    /// </summary>
    public partial class CloudTemplateDto : MachineDto
    {
        /// <summary>
        /// Initializes a new instance of the CloudTemplateDto class.
        /// </summary>
        public CloudTemplateDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CloudTemplateDto class.
        /// </summary>
        /// <param name="name">The name of the Machine a Robot is hosted
        /// on.</param>
        /// <param name="cloudServiceSubscriptionKey">The globally unique key
        /// that identifies a cloud service subscription</param>
        /// <param name="machineImage">The image to provision machines
        /// with</param>
        /// <param name="licenseKey">The key is automatically generated from
        /// the server for the Robot machine.
        /// &lt;para /&gt;For the robot to work, the same key must exist on
        /// both the robot and Orchestrator.
        /// &lt;para /&gt;All robots on a machine must have the same license
        /// key in order to register correctly.</param>
        /// <param name="type">The type of the Machine (Standard / Template).
        /// Possible values include: 'Standard', 'Template'</param>
        /// <param name="scope">The scope of the Machine (Default / Shared / PW
        /// / Cloud). Possible values include: 'Default', 'Shared',
        /// 'PersonalWorkspace', 'Cloud'</param>
        /// <param name="nonProductionSlots">Number of NonProduction slots to
        /// be reserved at runtime</param>
        /// <param name="unattendedSlots">Number of Unattended slots to be
        /// reserved at runtime</param>
        /// <param name="headlessSlots">Number of Headless slots to be reserved
        /// at runtime</param>
        /// <param name="testAutomationSlots">Number of TestAutomation slots to
        /// be reserved at runtime</param>
        /// <param name="key">An immutable unique identifier that is preserved
        /// during tenant migration</param>
        /// <param name="robotVersions">The versions of the Robots hosted on
        /// the Machine.</param>
        /// <param name="robotUsers">Robots assigned to template
        /// machine.</param>
        /// <param name="poolSizeCap">The maximum number of machines that can
        /// be provisioned in the pool</param>
        /// <param name="resourceGroup">The name of the resource group to
        /// contain the machines</param>
        /// <param name="machineSize">The size of the machines</param>
        /// <param name="machineSizeGroup">The size group of the machines.
        /// Possible values include: 'Small', 'Medium', 'Large'</param>
        /// <param name="machineSubnet">The network subnet to connect the
        /// machines to</param>
        /// <param name="location">The location the machines will run
        /// in</param>
        public CloudTemplateDto(string name, System.Guid cloudServiceSubscriptionKey, string machineImage, string licenseKey = default(string), string description = default(string), MachineDtoType? type = default(MachineDtoType?), MachineDtoScope? scope = default(MachineDtoScope?), int? nonProductionSlots = default(int?), int? unattendedSlots = default(int?), int? headlessSlots = default(int?), int? testAutomationSlots = default(int?), System.Guid? key = default(System.Guid?), IList<MachinesRobotVersionDto> robotVersions = default(IList<MachinesRobotVersionDto>), IList<RobotUserDto> robotUsers = default(IList<RobotUserDto>), long? id = default(long?), int? poolSizeCap = default(int?), string resourceGroup = default(string), string machineSize = default(string), CloudTemplateDtoMachineSizeGroup? machineSizeGroup = default(CloudTemplateDtoMachineSizeGroup?), string machineSubnet = default(string), string location = default(string))
            : base(name, licenseKey, description, type, scope, nonProductionSlots, unattendedSlots, headlessSlots, testAutomationSlots, key, robotVersions, robotUsers, id)
        {
            CloudServiceSubscriptionKey = cloudServiceSubscriptionKey;
            PoolSizeCap = poolSizeCap;
            ResourceGroup = resourceGroup;
            MachineImage = machineImage;
            MachineSize = machineSize;
            MachineSizeGroup = machineSizeGroup;
            MachineSubnet = machineSubnet;
            Location = location;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the globally unique key that identifies a cloud
        /// service subscription
        /// </summary>
        [JsonProperty(PropertyName = "cloudServiceSubscriptionKey")]
        public System.Guid CloudServiceSubscriptionKey { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of machines that can be provisioned
        /// in the pool
        /// </summary>
        [JsonProperty(PropertyName = "poolSizeCap")]
        public int? PoolSizeCap { get; set; }

        /// <summary>
        /// Gets or sets the name of the resource group to contain the machines
        /// </summary>
        [JsonProperty(PropertyName = "resourceGroup")]
        public string ResourceGroup { get; set; }

        /// <summary>
        /// Gets or sets the image to provision machines with
        /// </summary>
        [JsonProperty(PropertyName = "machineImage")]
        public string MachineImage { get; set; }

        /// <summary>
        /// Gets or sets the size of the machines
        /// </summary>
        [JsonProperty(PropertyName = "machineSize")]
        public string MachineSize { get; set; }

        /// <summary>
        /// Gets or sets the size group of the machines. Possible values
        /// include: 'Small', 'Medium', 'Large'
        /// </summary>
        [JsonProperty(PropertyName = "machineSizeGroup")]
        public CloudTemplateDtoMachineSizeGroup? MachineSizeGroup { get; set; }

        /// <summary>
        /// Gets or sets the network subnet to connect the machines to
        /// </summary>
        [JsonProperty(PropertyName = "machineSubnet")]
        public string MachineSubnet { get; set; }

        /// <summary>
        /// Gets or sets the location the machines will run in
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (MachineImage == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MachineImage");
            }
        }
    }
}
