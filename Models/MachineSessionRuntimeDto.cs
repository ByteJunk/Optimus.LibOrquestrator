// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Optimus.LibOrquestrator.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class MachineSessionRuntimeDto
    {
        /// <summary>
        /// Initializes a new instance of the MachineSessionRuntimeDto class.
        /// </summary>
        public MachineSessionRuntimeDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MachineSessionRuntimeDto class.
        /// </summary>
        /// <param name="runtimeType">Possible values include: 'NonProduction',
        /// 'Attended', 'Unattended', 'Studio', 'Development', 'StudioX',
        /// 'Headless', 'StudioPro', 'TestAutomation'</param>
        /// <param name="machineType">Possible values include: 'Standard',
        /// 'Template'</param>
        /// <param name="machineScope">Possible values include: 'Default',
        /// 'Shared', 'PersonalWorkspace', 'Cloud'</param>
        /// <param name="status">Possible values include: 'Available', 'Busy',
        /// 'Disconnected', 'Unknown'</param>
        public MachineSessionRuntimeDto(long? sessionId = default(long?), long? machineId = default(long?), string machineName = default(string), string hostMachineName = default(string), MachineSessionRuntimeDtoRuntimeType? runtimeType = default(MachineSessionRuntimeDtoRuntimeType?), MachineSessionRuntimeDtoMachineType? machineType = default(MachineSessionRuntimeDtoMachineType?), MachineSessionRuntimeDtoMachineScope? machineScope = default(MachineSessionRuntimeDtoMachineScope?), MachineSessionRuntimeDtoStatus? status = default(MachineSessionRuntimeDtoStatus?), bool? isUnresponsive = default(bool?), long? runtimes = default(long?), long? usedRuntimes = default(long?), string serviceUserName = default(string), System.DateTime? reportingTime = default(System.DateTime?))
        {
            SessionId = sessionId;
            MachineId = machineId;
            MachineName = machineName;
            HostMachineName = hostMachineName;
            RuntimeType = runtimeType;
            MachineType = machineType;
            MachineScope = machineScope;
            Status = status;
            IsUnresponsive = isUnresponsive;
            Runtimes = runtimes;
            UsedRuntimes = usedRuntimes;
            ServiceUserName = serviceUserName;
            ReportingTime = reportingTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SessionId")]
        public long? SessionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MachineId")]
        public long? MachineId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MachineName")]
        public string MachineName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HostMachineName")]
        public string HostMachineName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NonProduction', 'Attended',
        /// 'Unattended', 'Studio', 'Development', 'StudioX', 'Headless',
        /// 'StudioPro', 'TestAutomation'
        /// </summary>
        [JsonProperty(PropertyName = "RuntimeType")]
        public MachineSessionRuntimeDtoRuntimeType? RuntimeType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Standard', 'Template'
        /// </summary>
        [JsonProperty(PropertyName = "MachineType")]
        public MachineSessionRuntimeDtoMachineType? MachineType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Default', 'Shared',
        /// 'PersonalWorkspace', 'Cloud'
        /// </summary>
        [JsonProperty(PropertyName = "MachineScope")]
        public MachineSessionRuntimeDtoMachineScope? MachineScope { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Available', 'Busy',
        /// 'Disconnected', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "Status")]
        public MachineSessionRuntimeDtoStatus? Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsUnresponsive")]
        public bool? IsUnresponsive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Runtimes")]
        public long? Runtimes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "UsedRuntimes")]
        public long? UsedRuntimes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ServiceUserName")]
        public string ServiceUserName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ReportingTime")]
        public System.DateTime? ReportingTime { get; set; }

    }
}
